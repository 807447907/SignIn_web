<?php

namespace App\Http\Controllers\Teacher;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use PHPExcel;
use PHPExcel_Writer_HTML;
use PHPExcel_IOFactory;
use App\Course;


class CourseController extends Controller
{
    public function create(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|max:30',
            'description' => 'max:255',
        ]);

        if ($validator->fails()) {
            return [
                'errmsg' => $this->errorToString($validator->errors()),
            ];
        }
        Course::create(
            $request->only(['user_id', 'name', 'description'])
        );
        return [
            'msg' => '课程创建成功',
        ];
    }

    public function show(Request $request, $course_id = null)
    {
        if ($course_id === null) {
            return [
                'list' => Course::where($request->only('user_id'))
                    ->get()
                    ->makeHidden(['user_id', 'description', 'updated_at'])
            ];
        }
        return $this->getCourse($request, $course_id);
    }

    public function export(Request $request, $course_id)
    {
        $course = $this->getCourse($request, $course_id);
        $author = $course->User['name'];
        $filename = $course['name'] . '-' . date('ymd_His') . '.xlsx';

        $objPHPExcel = new PHPExcel();
        $objPHPExcel->getProperties()->setCreator($author)
            ->setLastModifiedBy($author)
            ->setTitle($course['name'])
            ->setDescription("SignIn records, generated by luozy.cn");

        $i = 0;
        foreach ($course->sign_ins as $sign_in) {
            if ($i > 0) {
                $objPHPExcel->createSheet();
            }
            $arrayData = array(['学号', '姓名', '签到时间']);
            foreach ($sign_in->records as $record) {
                $user = $record->user;
                $arrayData[] = [$user['user_id'], $user['name'], $record['updated_at']->format("Y-m-d H:i:s")];
            }
            $objPHPExcel
                ->setActiveSheetIndex($i)
                ->fromArray($arrayData)
                ->setTitle($sign_in->name);
            $i++;
        }

        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');
        header('Cache-Control: max-age=1');
        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header('Pragma: public'); // HTTP/1.0
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');

    }

    public function delete(Request $request, $course_id)
    {
        $course = $this->getCourse($request, $course_id);
        foreach ($course->sign_ins as $sign_in) {
            $sign_in->delete();
        }
        $course->delete();
        return [
            'msg' => '课程已删除',
        ];
    }

    private function getCourse($request, $course_id)
    {
        if (($course = Course::where(['user_id' => $request->input('user_id'), 'course_id' => $course_id])->first()) === null
        ) {
            header('Content-type: application/json');
            echo json_encode(['errmsg' => '课程不存在']);
            exit;
        }
        return $course;
    }

    protected function errorToString($errors)
    {
        $str = null;
        foreach ($errors->toArray() as $key => $value) {
            $str .= $key . ': ' . $value[0] . '\n';
        }
        return $str;
    }
}
